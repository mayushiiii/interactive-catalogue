O sa fiu sincera din prima, mi-a luat atat de mult tema incat am niste
inconsistente vizibile insa pe care eu nu am mai putut sa le vad si sa
le repar. Sunt constienta de asta si ar trebui sa ma intorc la ele,
dar nu mai am cand in acest moment.

O sa trec prin cerinte una cate una si voi explica ce am facut,
cred ca asa e cel mai simplu.

1.1 Clasa Catalog

Catalogul, conform cerintei, a fost realizat folosind Singleton. Am folosit
lazy instantiation, are mai mult sens pentru mine.
Prin urmare, de fiecare data trebuie sa apelez Catalog.getInstance pentru a
accesa catalogul si toate datele din el. M-am incurcat de macar 3 ori deoarece
pentru a accesa elementele din catalog trebuia si sa apelez getInstance si din
interiorul clasei? Candva stiam de ce, dar am uitat pana sa ajung in data de azi.
Am introdus niste getteri, de setteri nu am avut nevoie, si functiile cerute
(add/remove course si tot ce tine de observer). Pentru a-mi usura citirea
json-ului am si un getCourse(numele cursului).

1.2 Clasele User, Student, Parent, Assistant, Teacher

Aici inca ma bucuram de tema :)))))
Ultimele 4 clase o mostenesc pe prima, au toate nume si prenume.
In plus, exista functiile de get/set pentru parintii studentului, si din nou
functiile legate de observer(accept, care doar apeleaza visit. nu i-am inteles
complet scopul, simt ca e tot aia sa apelez visit direct).
Pentru convenienta puteam sa dau override la equals, ca sa nu mai compar pana-mi
crapa capul cu testele din json, dar era prea tarziu: deja comparasem fiecare
element camp cu camp si nu mai voiam sa ma intorc.

In plus, crearea de elemente noi se realizeaza folosind UserFactory, care
primeste ca input tipul, apoi datele necesare pentru un User. Am folosit
.equalsIgnoreCase pentru ca initial aveam alta viziunea asupra temei si
ma gandeam ca va fi mai relevant. Se putea folosi si un switch.

1.3 Clasa Grade

Plin de getteri,setteri, contine ce s-a cerut, nu a fost nevoie de nimic in plus.
Am presupus ca totalul este suma dintre partial si exam.
Am facut compare-ul si clone-ul destul de ieftin, dar au parut sa mearga.

1.4 Clasa Group

Deasemenea o clasa simpla unde s-a implementat numai ce s-a cerut. Nu am
inteles intentia din spatele constructorului cu un comparator.
Clasa extinde un ArrayList, in care se adauga studentii. Restul parametrilor
sunt doar detalii specifice grupei(ID, Asistent).

1.5 Clasa Course

Literalmente aici se afla toata tema. E o enormitate de 300 de randuri (cu tot
cu subclasele sale) plina de functii care probabil faceau mai mult bine daca
erau puse in alte clase mai mici, m-am pierdut mult prea mult in ele.

Am introdus si getteri si setteri, insa nu consider setterii necesari deoarece
avem builder. Consideram existenta lor folositoare in cazuri fictionale (a fost
trecut gresit un asistent si trebuie schimbat... chestii de genul)

In cerinta, addAssistant are ca parametru si ID-ul. Insa acesta nu se da odata
cu introducerea asistentilor prima oara, deci am realizat o a doua functie
addAssistant care pur si simplu adauga asistentul in lista de asistenti.
Ma rog, lista e defapt un HashSet, deoarece Set nu permite existenta duplicatelor,
astfel nu mai e nevoie sa verific eu. Se putea si SortedSet sau cred TreeSet dar
ce a mers a mers.
Celalalt addAssistant, cel din cerinta, verifica daca grupa are deja asistent.
In caz contrar, il seteaza pe cel dat ca argument, apoi il adauga la lista.
Mi s-a parut ca acest add nu se leaga bine de teste, personal.
Cursul are un camp cu lista de asistenti si singura cale pentru a avea
si un ID ar fi fost sa nu mai trec asistentii din prima, ceea ce ar fi facut
existanta lor ca argument initial fara rost.

O situatie similara pentru addGroup, celelalte metode de add nu sunt atat de
folositoare in contextul dat, in care grupele se formeaza din prima si apoi
se pot adauga asa cum s-au si format.




















